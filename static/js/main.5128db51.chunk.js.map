{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["events","SuggestedEvents","memo","class","map","event","eventName","supportName","choices","choice","name","detail","App","useState","isInit","setIsInit","suggests","setSuggests","useEffect","fetch","then","res","text","JSON","parse","_supports","reduce","acc","cur","forEach","push","className","type","onInput","e","val","currentTarget","value","matched","indexOf","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wLAGIA,EAAS,GAiDPC,EAAkBC,gBAAK,YAAe,IAAbF,EAAY,EAAZA,OAC7B,OACE,qBAAKG,MAAM,cAAX,SACCH,EAAOI,KAAI,SAAAC,GACV,OACE,qCACE,6BAAKA,EAAMC,YACX,6BAAKD,EAAME,cACX,6BACCF,EAAMG,QAAQJ,KAAI,SAAAK,GACjB,OACE,qCACE,6BAAKA,EAAOC,OACZ,8BAAMD,EAAOE,4BAYdC,EAxEH,WAAO,IAAD,EAEYC,oBAAS,GAFrB,mBAETC,EAFS,KAEDC,EAFC,OAGgBF,mBAAS,IAHzB,mBAGTG,EAHS,KAGCC,EAHD,KAKhBC,qBAAU,WACRC,MAAM,mBACLC,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAE,GAAI,OAAGC,KAAKC,MAAMF,MACvBF,MAAK,SAAAK,GACJzB,EAASyB,EAAUC,QAAO,SAACC,EAAKC,GAQ9B,OAPAA,EAAI5B,OAAO6B,SAAQ,SAAAxB,GACjBsB,EAAIG,KAAK,CACPvB,YAAaqB,EAAIlB,KACjBJ,UAAWD,EAAMK,KACjBF,QAASH,EAAMG,aAGZmB,IACN,IACHZ,GAAU,QAEX,IAiBH,OACE,sBAAKgB,UAAU,MAAf,UACGjB,EAAO,uBAAOkB,KAAK,OAAOC,QAjBf,SAAAC,GACd,IAAMC,EAAMD,EAAEE,cAAcC,MAC5B,GAAIF,EAAJ,CAIA,IAAMG,EAAUtC,EAAO0B,QAAO,SAACC,EAAKC,GAIlC,OAHGA,EAAItB,UAAUiC,QAAQJ,IAAQ,GAC/BR,EAAIG,KAAKF,GAEJD,IACN,IACHV,EAAYqB,QATVrB,EAAY,OAc0C,GACtD,cAAChB,EAAD,CAAiBD,OAAQgB,QCnChBwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.5128db51.chunk.js","sourcesContent":["import {useEffect, useState, memo} from \"react\"\nimport './App.css';\n\nlet events = []\n\nconst App = () => {\n\n  const [isInit, setIsInit] = useState(false)\n  const [suggests, setSuggests] = useState([])\n\n  useEffect(() => {\n    fetch(\"./supports.json\")\n    .then(res=> res.text())\n    .then(text=> JSON.parse(text))\n    .then(_supports => {\n      events = _supports.reduce((acc, cur) => {\n        cur.events.forEach(event => {\n          acc.push({\n            supportName: cur.name,\n            eventName: event.name,\n            choices: event.choices\n          })\n        })\n        return acc\n      }, [])\n      setIsInit(true)\n    })\n  }, [])\n\n  const onInput = e => {\n    const val = e.currentTarget.value\n    if(!val) {\n      setSuggests([])\n      return\n    }\n    const matched = events.reduce((acc, cur) => {\n      if(cur.eventName.indexOf(val) > -1){\n        acc.push(cur)\n      }\n      return acc\n    }, [])\n    setSuggests(matched)\n  }\n\n  return (\n    <div className=\"App\">\n      {isInit?<input type=\"text\" onInput={onInput}></input>:\"\"}\n      <SuggestedEvents events={suggests}></SuggestedEvents>\n    </div>\n  );\n}\n\nconst SuggestedEvents = memo(({events}) => {\n  return (\n    <div class=\"suggestions\">\n    {events.map(event => {\n      return (\n        <>\n          <h2>{event.eventName}</h2>\n          <h5>{event.supportName}</h5>\n          <ul>\n          {event.choices.map(choice => {\n            return (\n              <>\n                <li>{choice.name}</li>\n                <div>{choice.detail}</div>\n              </>\n            )\n          })}\n          </ul>\n        </>\n      )\n    })}\n    </div>\n  )\n})\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}